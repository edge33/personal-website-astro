---
import type { GetStaticPaths } from 'astro';
import Layout from '../../layouts/Layout.astro';
import { getAllNotionPages, getNotionPageMD } from '../../notion';
// import plainwhiteConfig from '../../plainwhite.config';
import formatDate from '../../utils/formatDate';
// import Disqus from '../../components/Disqus.astro';

export const getStaticPaths = (async () => {
    const notionPages = await getAllNotionPages();

    return notionPages.map((p) => ({ params: { id: p.id } }));
}) satisfies GetStaticPaths;

const { id } = Astro.params;

const data = await getNotionPageMD(id);

if (!data) {
    return Astro.redirect('/404');
}

const { html, pageProp } = data;
---

<Layout title={pageProp.title} pageType="post">
    <div class="post-container">
        <a class="post-link" href={id}>
            <h2 class="post-title">{pageProp.title}</h2>
        </a>
        <div class="post-meta">
            <div class="post-date">
                <i class="icon-calendar"></i>{
                    formatDate(pageProp.date.split(' ')[0])
                }
            </div>
            {
                pageProp.categories.length > 0 && (
                    <ul class="post-categories">
                        {pageProp.categories.map((c) => (
                            <li>{c}</li>
                        ))}
                    </ul>
                )
            }
        </div>
        <div class="post" set:html={html} />

        <!-- <Disqus /> -->
    </div>
</Layout>

<script>
    import mermaid from 'mermaid';

    const htmlElement = document.querySelector('html');
    const isDarkMode = htmlElement?.getAttribute('class')?.includes('dark');
    mermaid.initialize({
        theme: isDarkMode ? 'dark' : 'base',
        flowchart: {
            htmlLabels: false,
        },
    });

    const elementCode = '.mermaid';

    const saveOriginalData = function () {
        return new Promise<void>((resolve, reject) => {
            try {
                const els = document.querySelectorAll(elementCode);
                let count = els.length;
                els.forEach((element) => {
                    element.setAttribute(
                        'data-original-code',
                        element.innerHTML
                    );
                    count--;
                    if (count == 0) {
                        resolve();
                    }
                });
            } catch (error) {
                reject(error);
            }
        });
    };
    const resetProcessed = function () {
        return new Promise<void>((resolve, reject) => {
            try {
                const els = document.querySelectorAll(elementCode);
                let count = els.length;
                els.forEach((element) => {
                    if (element.getAttribute('data-original-code') != null) {
                        element.removeAttribute('data-processed');
                        if (element) {
                            const attribute =
                                element.getAttribute('data-original-code');
                            if (attribute) {
                                element.innerHTML = attribute;
                            }
                        }
                    }
                    count--;
                    if (count == 0) {
                        resolve();
                    }
                });
            } catch (error) {
                reject(error);
            }
        });
    };

    await saveOriginalData();

    function callback(
        mutationsList: MutationRecord[],
        _observer: MutationObserver
    ) {
        mutationsList.forEach(async (mutation) => {
            if (mutation.attributeName === 'class') {
                const isDarkMode = htmlElement
                    ?.getAttribute('class')
                    ?.includes('dark');

                await resetProcessed();

                mermaid.initialize({
                    theme: isDarkMode ? 'dark' : 'base',
                    flowchart: {
                        htmlLabels: false,
                    },
                });
                mermaid.run();
            }
        });
    }

    const mutationObserver = new MutationObserver(callback);

    if (htmlElement) {
        mutationObserver.observe(htmlElement, { attributes: true });
    }
</script>
